{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python-practice2","result":{"data":{"markdownRemark":{"id":"fa662a05-817f-52af-bbd8-e2f9e4c811a3","html":"<h4 id=\"1-the-formataddress-function-separates-out-parts-of-the-address-string-into-new-strings-housenumber-and-street_name-and-returns-house-number-x-on-street-named-y-the-format-of-the-input-string-is-numeric-house-number-followed-by-the-street-name-which-may-contain-numbersbut-never-by-themselves-and-could-be-several-words-long-for-example-123-main-street-1001-1st-ave-or-55-north-center-drive-fill-in-the-gaps-to-complete-this-function\"><a href=\"#1-the-formataddress-function-separates-out-parts-of-the-address-string-into-new-strings-housenumber-and-street_name-and-returns-house-number-x-on-street-named-y-the-format-of-the-input-string-is-numeric-house-number-followed-by-the-street-name-which-may-contain-numbersbut-never-by-themselves-and-could-be-several-words-long-for-example-123-main-street-1001-1st-ave-or-55-north-center-drive-fill-in-the-gaps-to-complete-this-function\" aria-label=\"1 the formataddress function separates out parts of the address string into new strings housenumber and street_name and returns house number x on street named y the format of the input string is numeric house number followed by the street name which may contain numbersbut never by themselves and could be several words long for example 123 main street 1001 1st ave or 55 north center drive fill in the gaps to complete this function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. The format<em>address function separates out parts of the address string into new strings: house</em>number and street_name, and returns: “house number X on street named Y”. The format of the input string is: numeric house number, followed by the street name which may contain numbers,but never by themselves, and could be several words long. For example, “123 Main Street”, “1001 1st Ave”, or “55 North Center Drive”. Fill in the gaps to complete this function.</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  <span class=\"token comment\"># Declare variables</span>\n  house_number <span class=\"token operator\">=</span><span class=\"token string\">''</span>\n  street_name <span class=\"token operator\">=</span><span class=\"token string\">''</span>\n  <span class=\"token comment\"># Separate the address string into parts</span>\n  spi <span class=\"token operator\">=</span> address_string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># Traverse through the address parts</span>\n  <span class=\"token keyword\">for</span> ele <span class=\"token keyword\">in</span> spi<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Determine if the address part is the</span>\n    <span class=\"token comment\"># house number or part of the street name</span>\n    <span class=\"token keyword\">if</span> ele<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      house_number <span class=\"token operator\">=</span> ele\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n      street_name <span class=\"token operator\">+=</span> ele\n      street_name <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span>\n  <span class=\"token comment\"># Does anything else need to be done </span>\n  <span class=\"token comment\"># before returning the result?</span>\n  \n  <span class=\"token comment\"># Return the formatted string  </span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"house number {} on street named {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>house_number<span class=\"token punctuation\">,</span> street_name<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"2-question-2\"><a href=\"#2-question-2\" aria-label=\"2 question 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Question 2</h4>\n<h4 id=\"a-professor-with-two-assistants-jamie-and-drew-wants-an-attendance-list-of-the-students-in-the-order-that-they-arrived-in-the-classroom-drew-was-the-first-one-to-note-which-students-arrived-and-then-jamie-took-over-after-the-class-they-each-entered-their-lists-into-the-computer-and-emailed-them-to-the-professor-who-needs-to-combine-them-into-one-in-the-order-of-each-students-arrival-jamie-emailed-a-follow-up-saying-that-her-list-is-in-reverse-order-complete-the-steps-to-combine-them-into-one-list-as-follows-the-contents-of-drews-list-followed-by-jamies-list-in-reverse-order-to-get-an-accurate-list-of-the-students-as-they-arrived\"><a href=\"#a-professor-with-two-assistants-jamie-and-drew-wants-an-attendance-list-of-the-students-in-the-order-that-they-arrived-in-the-classroom-drew-was-the-first-one-to-note-which-students-arrived-and-then-jamie-took-over-after-the-class-they-each-entered-their-lists-into-the-computer-and-emailed-them-to-the-professor-who-needs-to-combine-them-into-one-in-the-order-of-each-students-arrival-jamie-emailed-a-follow-up-saying-that-her-list-is-in-reverse-order-complete-the-steps-to-combine-them-into-one-list-as-follows-the-contents-of-drews-list-followed-by-jamies-list-in-reverse-order-to-get-an-accurate-list-of-the-students-as-they-arrived\" aria-label=\"a professor with two assistants jamie and drew wants an attendance list of the students in the order that they arrived in the classroom drew was the first one to note which students arrived and then jamie took over after the class they each entered their lists into the computer and emailed them to the professor who needs to combine them into one in the order of each students arrival jamie emailed a follow up saying that her list is in reverse order complete the steps to combine them into one list as follows the contents of drews list followed by jamies list in reverse order to get an accurate list of the students as they arrived permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A professor with two assistants, Jamie and Drew, wants an attendance list of the students, in the order that they arrived in the classroom. Drew was the first one to note which students arrived, and then Jamie took over. After the class, they each entered their lists into the computer and emailed them to the professor, who needs to combine them into one, in the order of each student’s arrival. Jamie emailed a follow-up, saying that her list is in reverse order. Complete the steps to combine them into one list as follows: the contents of Drew’s list, followed by Jamie’s list in reverse order, to get an accurate list of the students as they arrived.</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">combine_lists</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Generate a new list containing the elements of list2</span>\n  <span class=\"token comment\"># Followed by the elements of list1 in reverse order</span>\n  new_list <span class=\"token operator\">=</span> list2\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    new_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> new_list\n\nJamies_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cindy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bobby\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">]</span>\nDrews_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Carol\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Greg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Marcia\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"3-use-a-list-comprehension-to-create-a-list-of-squared-numbers-nn-the-function-receives-the-variables-start-and-end-and-returns-a-list-of-squares-of-consecutive-numbers-between-start-and-end-inclusively-for-example-squares2-3-should-return-4-9\"><a href=\"#3-use-a-list-comprehension-to-create-a-list-of-squared-numbers-nn-the-function-receives-the-variables-start-and-end-and-returns-a-list-of-squares-of-consecutive-numbers-between-start-and-end-inclusively-for-example-squares2-3-should-return-4-9\" aria-label=\"3 use a list comprehension to create a list of squared numbers nn the function receives the variables start and end and returns a list of squares of consecutive numbers between start and end inclusively for example squares2 3 should return 4 9 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Use a list comprehension to create a list of squared numbers (n*n). The function receives the variables start and end, and returns a list of squares of consecutive numbers between start and end inclusively. For example, squares(2, 3) should return [4, 9].</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Should be [4, 9]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Should be [1, 4, 9, 16, 25]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></code></pre></div>","fields":{"slug":"/posts/python-practice2","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2020-02-15T11:40:23","description":"python-practice2","tags":["python"],"title":"python-practice2"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python-practice2"}}}